# -*- coding: utf-8 -*-
"""2048057_Program_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TsgqsN5XVOebpfzBvjWhiTQuZ4aeNm9C

---
# <center> **NLP PROGRAM-5** </center>
## <center> A program to get antonyms from WordNet </center>
#### <center> Soundarya G_ 2048057</center>
---

## Downloading and Importing Wordnet
"""

# Downloading wordnet 
import nltk 
nltk.download('wordnet')
nltk.download('wordnet_ic')
nltk.download('genesis')

# Importing required libraries 
import re
import pandas as pd
from nltk.corpus import wordnet
from nltk.corpus import wordnet_ic
from nltk.corpus import genesis

"""## Antonyms

> To find a word's synonym and antonym.
"""

def word_details():
  antonyms = [] 
  synonyms = [] 
  word=input("Please enter a word : ")
  for syn_set in wordnet.synsets(word):  
    for l in syn_set.lemmas(): 
      synonyms.append(l.name()) 
      if l.antonyms(): 
        antonyms.append(l.antonyms()[0].name()) 
  print("\nSet of synonyms of the word:", set(synonyms))
  print("\nSet of antonyms of the word:", set(antonyms))

word_details()

word_details()

"""We can see that not every word we give, we get a antonym. It is because only limited words are available in the wordnet

# Main Code

> To find a word's synonym, part of speech, definition and antonym.The words returned in range Minimum 10 Words-Maximum N Words.
"""

def About_word():
  user_word = input("Enter the word: ")
  syn = wordnet.synsets(user_word) 

  word_list =[]
  pos_list = []
  antonym_list = []
  defn_list = []
  #rank_list = []

  pos_dict = {'n':'noun','v':'verb','a':'adjective','r':'adverb','s':'singular'}

  syn=list(syn)
  list1=[]
  for k in syn:
    list1.append(k)
    
  for i in range(len(list1)):
    value = str(list1[i])
    chunks = re.split("['.]",value)
    word_list.append(chunks[1])
    pos_list.append(pos_dict[chunks[2]])
    #rank_list.append(chunks[3])
    defn_list.append(list1[i].definition())

    for syn_set in wordnet.synsets(user_word):  
      for l in syn_set.lemmas(): 
        if l.antonyms(): 
          antonym_list.append(l.antonyms()[0].name())

  df = pd.DataFrame(list(zip(word_list, pos_list,defn_list, antonym_list)),
                  columns =['Synonym Word', 'POS','Definition','Antonym'])
  return df

About_word()

About_word()

About_word()