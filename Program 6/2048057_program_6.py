# -*- coding: utf-8 -*-
"""2048057_Program_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Biz8m-RcQxbuRF4CS_2ul91D3MePM9Kw

---
# <center> **NLP PROGRAM-6** </center>
## <center> A program for stemming Non-English words </center>
#### <center> Soundarya G_ 2048057</center>
---

* Use a minimum of 5 Stemmers(Specific to the language)  and maximum N 
* Compare each output with any one of the stemmers used before( English:Porter stemmer)
* Interpret the inflection for each output.

# Downloading and Importing
"""

# Import nltk 
import nltk 
nltk.download('all')

!pip install nltk

!pip install Tashaphyne

"""# Stemming

* Stemming is also a type of text normalization that enables you to standardize some words into specific expressions also called stems. 

* Stemming is basically removing the suffix from a word and reduce it to its root word. 
>For example: “Flying” is a word and its suffix is “ing”, if we remove “ing” from “Flying” then we will get base word or root word which is “Fly”

* Stemming VS Lemmatization
> Stemming: Produces a words "stem" which is produced by stemmers. 

         Ex: am -am
             the goin -the go
             having -hav
> Lemmatization: Produces words called "lemma" which is produced by lemmatizers.

         Ex: am -be
             the going -the going
             having -have

* Application of Stemming and Lemmatization

         - Sentimental Analysis
         - Document Clustering
         - Information Retrieval: search engines.
         - To determine domain vocabularies in domain analysis.

# Stemmers for Non-English words

There are different types of stemmers that supports english and non-english words

    - Porter Stemmer
    - Lancaster Stemmer
    - Lovins Stemmer 
    - Dawson Stemmer 
    - Krovetz Stemmer 
    - Snowball Stemmer
    - ISRI Stemmer
    - RSLPS Stemmer
    - Regexp Stemmer
    - Germen Stemmer
    - Cistem Stemmer
    - Lancaster Stemmer

Python nltk provides not only two English stemmers: PorterStemmer and LancasterStemmer but also a lot of non-English stemmers as part of SnowballStemmers, ISRIStemmer, RSLPSStemmer. Python NLTK included SnowballStemmers as a language to create to create non-English stemmers. One can program one's own language stemmer using snowball. Currently, it supports the following languages:
"""

# See which languages are supported
print(" ".join(SnowballStemmer.languages))

"""### German"""

from nltk.stem.snowball import SnowballStemmer
from nltk.stem.snowball import GermanStemmer
# from nltk.stem.cistem import Cistem
from nltk.stem import LancasterStemmer
from nltk.stem import PorterStemmer

# Defining the function that will take the String/word as the input and gives us the german stemmer
def German_Stemmer(word):
    print ("The string is:",word)
    # Snow Ball Stemmer
    stemmer_1 = SnowballStemmer(language="german")
    print('Snowball stemmer:',stemmer_1.stem(word))
    
    # German Stemmer
    stemmer_2 = GermanStemmer()
    print('German stemmer:',stemmer_2.stem(word))
    
    # Cistem Stemmer
    #stemmer_3 = Cistem()
    #print('Cistem stemmer\t:',stemmer_3.segment(word))
    
    # Lancaster Stemmer
    stemmer_4 =LancasterStemmer()
    print("Lancaster stemmer:",stemmer_4.stem(word))
    
    # Porter Stemmer
    stemmer_5 = PorterStemmer()
    print("Porter stemmer:",stemmer_5.stem(word))

# English : Pretend
German_Stemmer("Vorgeben")

# English : Amusement
German_Stemmer("Amüsement")

# English : Translate
German_Stemmer("Übersetzen")

# English : Sunrise
German_Stemmer("Singen")

"""> Inference: 

* For Vorgeben: according to Snowball Stemmer, German stemmer,Porter Stemmer and Lancaster Stemmer,the stem we got is 'vorgeb' which means 'specified'.

* For Übersetzen:  Snowball Stemmer,German stemmer,and Porter Stemmer,the stem we got is 'ubersetz' which means 'translated'. Incase of Lancaster stemmer we get 'übersetz' which also means 'translated'.

* For Singen: Snowball Stemmer,German stemmer,and Lancaster Stemmer,the stem we got is 'sing' which means 'sing'. Incase of Porter stemmer we get 'singen' which also means 'singing'.

### Spanish
"""

# Defining the function that will take the String/word as the input and gives us the spanish stemmer
def Spanish_Stemmer(word):
    print ("The string is:",word)
    # Snow Ball Stemmer
    stemmer_1 = SnowballStemmer(language='spanish')
    print('Snowball stemmer:',stemmer_1.stem(word))
    
    # Porter Stemmer
    stemmer_2 = PorterStemmer()
    print("Porter stemmer:",stemmer_2.stem(word))

    # Lancaster Stemmer
    stemmer_3 =LancasterStemmer()
    print("Lancaster stemmer:",stemmer_3.stem(word))

# English: dancing
Spanish_Stemmer('baile')

# English: translator
Spanish_Stemmer('traductora')

"""> Inference: 

* For baile: according to Snowball Stemmer, Porter Stemmer and Lancaster Stemmer,the stem we got is 'bail' which means 'dance'.

* For traductora:  Snowball Stemmer and Lancaster Stemmer,the stem we got is 'traductor' which means 'translator'. Incase of Porter stemmer we get 'traductora' which also means 'translator'.

### Portuguese
"""

from nltk.stem import RSLPStemmer

# Defining the function that will take the String/word as the input and gives us the Portuguese Stemmer
def Portuguese_Stemmer(word):
    print ("The string is:",word)
    # Snow Ball Stemmer
    stemmer_1 = SnowballStemmer(language="portuguese")
    print('Snowball stemmer:',stemmer_1.stem(word))
    
    # RSLP Stemmer
    stemmer_2 = RSLPStemmer()
    print("RSLP stemmer:",stemmer_2.stem(word))

# English: playing
Portuguese_Stemmer('jogando')

"""> Inference: 

* According to Snowball Stemmer the stem we got is 'jog' which means 'play'.

* According to RSLP Stemmer the stem we got is 'jog' which means 'play'.
"""

# English: translator
Portuguese_Stemmer('tradutora')

"""> Inference: 

* According to Snowball Stemmer and ArabicLight Stemmer the stem we got is 'tradutor', which means 'a translator'.

* According to ISRIS Stemmer the stem we got is 'tradu' which means 'translate'.

### Arabic
"""

from tashaphyne.stemming import ArabicLightStemmer
from nltk.stem.isri import ISRIStemmer

# Defining the function that will take the String/word as the input and gives us the Arabic Stemmer
def Arabic_Stemmer(word):
    print ("The string is:",word)
    # Snow Ball Stemmer
    stemmer_1 = SnowballStemmer(language="arabic")
    print('Snowball stemmer:',stemmer_1.stem(word))
    
    # ArabicLight Stemmer
    stemmer_2 = ArabicLightStemmer()
    print("ArabicLight stemmer:",stemmer_2.light_stem(word))

    # ISRIStemmer
    stemmer_3 = ISRIStemmer()
    print("ISRIStemmer:",stemmer_3.stem(word))

# English: translator
Arabic_Stemmer('مترجم')

"""> Inference: 

* According to Snowball Stemmer and ArabicLight Stemmer the stem we got is 'مترجم', it dint get changed.

* According to ISRIS Stemmer the stem we got is 'ترجم' which means 'translate'.
"""

# English: fairly
Arabic_Stemmer('تماما')

"""> Inference: 

* According to Snowball Stemmer the stem we got is 'تمام' which means 'OK'.

* According to ArabicLight Stemmer the stem we got is 'مام' which means 'mum' while translating it to english.

* According to ISRIStemmer the stem we obtained is 'تما' which means 'Perfect'.

"""